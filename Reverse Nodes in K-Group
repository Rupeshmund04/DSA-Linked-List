/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        if (head == null || head.next == null || k == 0) return head;
        int count = 0;
        ListNode temp = head;
        while (temp != null && count < k) {
            temp = temp.next;
            count++;
        }
        if (count < k) return head;
        ListNode newHead = reverse(head, temp);
        head.next = reverseKGroup(temp, k);
        return newHead;
    }
    private static ListNode reverse(ListNode start, ListNode end) {
        ListNode prev = null, next;
        while (start != end) {
            next = start.next;
            start.next = prev; 
            prev = start;
            start = next;
        }
        return prev;
    }
} 
